import telebot
import sqlite3
import requests
import logging
from telebot import types
import time
import random, string

# Initialize bot and set up API
API_TOKEN = "7927646488:AAESP-k-oDJwTRlCin22IfEXPxkZzfYY4cQ"
CRYPTO_PAY_API_TOKEN = "346879:AAJaauJ6q2ZqQdOzGploB7t4PCFtdT1exOr"
bot = telebot.TeleBot(API_TOKEN)

# Set up logging
logging.basicConfig(level=logging.INFO)

# SQLite for storing user data
def init_db():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            name TEXT,
            balance REAL DEFAULT 0.0,
            total_orders REAL DEFAULT 0.0,
            ref_code TEXT UNIQUE,
            used_ref_code TEXT DEFAULT NULL,
            referrer_id INTEGER DEFAULT NULL
        )
    ''')
    conn.commit()
    conn.close()

def generate_ref_code():
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))

def get_user(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    conn.close()
    return user

def add_user(user_id, name):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    ref_code = generate_ref_code()
    cursor.execute("INSERT INTO users (user_id, name, ref_code) VALUES (?, ?, ?)", (user_id, name, ref_code))
    conn.commit()
    conn.close()
    return ref_code 

# Function to create invoice
def create_invoice(asset, amount, description):
    logging.info(f"Creating invoice for {asset} {amount}...")
    url = "https://pay.crypt.bot/api/createInvoice"
    payload = {
        "asset": asset,
        "amount": str(amount),
        "description": description
    }
    headers = {
        "Crypto-Pay-API-Token": CRYPTO_PAY_API_TOKEN
    }
    response = requests.post(url, json=payload, headers=headers)
    if response.status_code == 200:
        logging.info(f"Invoice created successfully: {response.json()}")
        return response.json()
    else:
        logging.error(f"Error creating invoice: {response.text}")
        return None

# Function to check invoice status
def get_invoice(invoice_id):
    logging.info(f"Checking invoice status for ID: {invoice_id}...")
    url = f"https://pay.crypt.bot/api/getInvoice"
    params = {
        "invoice_id": invoice_id
    }
    headers = {
        "Crypto-Pay-API-Token": CRYPTO_PAY_API_TOKEN
    }
    response = requests.get(url, params=params, headers=headers)
    if response.status_code == 200:
        logging.info(f"Invoice status retrieved: {response.json()}")
        return response.json()
    else:
        logging.error(f"Error getting invoice: {response.text}")
        return None

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.chat.id
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    
    if user:
        name = user[1]
        ref_code = user[4]
    else:
        first_name = message.from_user.first_name
        ref_code = generate_ref_code()
        cursor.execute("INSERT INTO users (user_id, name, ref_code) VALUES (?, ?, ?)", (user_id, first_name, ref_code))
        conn.commit()
        name = first_name
    
    conn.close()

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("🔑 Enter Referral Code"))
    markup.add(types.KeyboardButton("🏠 Main Menu"))

    bot.send_message(
        user_id,
        f"✨ Thank you for joining our service, {name}!\n"
        "Here you will find promo codes for various cryptocurrencies. Don't worry about security, we sell only guaranteed promo codes.\n\n"
        f"✨ Your unique referral code: `{ref_code}`\n"
        "You can invite friends using this code or by sending them the link below.",
        parse_mode="Markdown",
        reply_markup=markup
    )


@bot.message_handler(func=lambda message: message.text == "🔑 Enter Referral Code")
def ask_for_ref_code(message):
    msg = bot.send_message(message.chat.id, "🔑 Please enter your referral code:")
    bot.register_next_step_handler(msg, process_ref_code)

def process_ref_code(message):
    user_id, ref_code = message.chat.id, message.text.strip().upper()
    user = get_user(user_id)
    if user and user[5]:
        bot.send_message(user_id, "❌ You have already used a referral code!")
        return
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM users WHERE ref_code = ?", (ref_code,))
    referrer = cursor.fetchone()
    if referrer:
        referrer_id = referrer[0]
        cursor.execute("UPDATE users SET used_ref_code = ?, referrer_id = ? WHERE user_id = ?", (ref_code, referrer_id, user_id))
        cursor.execute("UPDATE users SET balance = balance + 1 WHERE user_id = ?", (referrer_id,))
        conn.commit()
        bot.send_message(user_id, "✅ Referral code applied successfully!")
        bot.send_message(referrer_id, "🎉 You earned a referral reward! 1 point added.")
    else:
        bot.send_message(user_id, "❌ Invalid referral code. Try again.")
    conn.close()

@bot.message_handler(func=lambda message: message.text == "🏠 Main Menu")
def main_menu(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("📝 Rules"))
    keyboard.add(types.KeyboardButton("👤 Profile"))
    keyboard.add(types.KeyboardButton("🔍 Find promo code"))
    bot.send_message(message.chat.id, "🏠 Main Menu", reply_markup=keyboard)

# Main menu
def start_menu():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("📝 Rules"))
    keyboard.add(types.KeyboardButton("👤 Profile"))
    keyboard.add(types.KeyboardButton("🔍 Find promo code"))
    logging.info("Main menu keyboard created.")
    return keyboard

# Handler for "Rules" button
@bot.message_handler(func=lambda message: message.text == "📝 Rules")
def show_rules(message):
    logging.info(f"Rules button clicked by {message.chat.id}")
    bot.send_message(message.chat.id, "📌 All promo codes come with a 72-hour guarantee after purchase.\n⚠ If the promo code becomes invalid due to your actions, a refund is not possible.")

# Handler for "Profile" button
@bot.message_handler(func=lambda message: message.text == "👤 Profile")
def show_profile(message):
    user_id = message.chat.id
    user = get_user(user_id)
    if user:
        name, balance, total_orders, ref_code, used_ref_code = user[1:6]
        profile_msg = f"❤ Name: {name}\n🔑 ID: {user_id}\n💰 Balance: {balance}\n💲 Total orders: {total_orders}\n🆔 Referral code: `{ref_code}`"
        if used_ref_code:
            profile_msg += f"\n🔗 Used referral code: `{used_ref_code}`"
    else:
        profile_msg = "❌ Profile not found!"
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text="📦 Order History", callback_data="order_history"))
    markup.add(types.InlineKeyboardButton(text="🔙 Back", callback_data="back_start"))

    bot.send_message(message.chat.id, profile_msg, parse_mode="Markdown", reply_markup=markup)


# Order history
@bot.callback_query_handler(func=lambda call: call.data == "order_history")
def order_history(call):
    user_id = call.message.chat.id
    logging.info(f"Order history requested by {user_id}")
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute("SELECT total_orders FROM users WHERE user_id = ?", (user_id,))
    total_orders = cursor.fetchone()
    conn.close()
    
    if total_orders:
        bot.send_message(call.message.chat.id, f"📦 You have {total_orders[0]} orders.")
    else:
        bot.send_message(call.message.chat.id, "📦 You have no orders.")

# Referral system
@bot.callback_query_handler(func=lambda call: call.data == "referral_system")
def referral_system(call):
    user_id = call.message.chat.id
    referral_link = f"https://t.me/{bot.get_me().username}?start={user_id}"
    logging.info(f"Referral system requested by {user_id}")
    bot.send_message(call.message.chat.id, f"💡 Earn rewards with our referral system! Invite your friends and get rewarded for every purchase they make.\n💰 Your earnings: 1 point for each successful purchase made through your referral.\n🔗 Your unique referral link: {referral_link}")

# Find promo code
@bot.message_handler(func=lambda message: message.text == "🔍 Find promo code")
def find_promo_code(message):
    logging.info(f"Find promo code clicked by {message.chat.id}")
    # Send "Spinning the wheel..." message and remove keyboard
    markup = types.ReplyKeyboardRemove()
    sent_message = bot.send_message(message.chat.id, "🎰 Spinning the wheel...", reply_markup=markup)

    # Delay 3 seconds
    time.sleep(3)

    # Delete the message
    bot.delete_message(message.chat.id, sent_message.message_id)

    # Send main message
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text="💰 Buy promo code", callback_data="buy_promo"))
    markup.add(types.InlineKeyboardButton(text="🔙 Back", callback_data="back_start"))
    bot.send_message(message.chat.id, "📃 Platform: {link} (hidden)\n📃 Promo code: {code} (hidden)", reply_markup=markup)

# Handler for buying promo code
@bot.callback_query_handler(func=lambda call: call.data == "buy_promo")
def buy_promo(call):
    logging.info(f"Promo code purchase requested by {call.message.chat.id}")
    asset = 'USDT'
    amount = 10
    send_invoice(call.message, asset, amount, 'Buying promo code')

# Function to create and send invoice
def send_invoice(message, asset, amount, period):
    logging.info(f"Sending invoice for {amount} {asset} to {message.chat.id} for {period}")
    invoice = create_invoice(asset, amount, f'Payment for {period}')
    if invoice and 'result' in invoice:
        invoice_data = invoice['result']
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='💰 Pay', url=invoice_data['pay_url']))
        keyboard.add(types.InlineKeyboardButton(text='🔄 Check', callback_data=f'check|{invoice_data["invoice_id"]}|{amount}|{asset}|{period}'))
        keyboard.add(types.InlineKeyboardButton(text='🔙 Back', callback_data='back_start'))
        bot.send_message(message.chat.id,
                         f'Amount to pay: {amount} {asset}\n'
                         f'Once the payment is complete, click "Check" to confirm.',
                         reply_markup=keyboard)
    else:
        bot.reply_to(message, 'An error occurred while creating the invoice. Please try again later.')

# Handler for payment status check
@bot.callback_query_handler(func=lambda call: call.data.startswith('check'))
def check_payment(call):
    logging.info(f"Checking payment status for invoice {call.data}")
    _, invoice_id, amount, asset, period = call.data.split('|')
    invoice_data = get_invoice(invoice_id)
    if invoice_data and invoice_data['result']['status'] == 'paid':
        bot.send_message(call.message.chat.id, f"✅ Payment of {amount} {asset} successfully completed.\nYour promo code: {invoice_data['result']['code']}")  
    else:
        bot.send_message(call.message.chat.id, "❌ Payment not confirmed. Please try again later.")

# Handler for "Back" button
@bot.callback_query_handler(func=lambda call: call.data == "back_start")
def back_to_start(call):
    logging.info(f"Back button clicked by {call.message.chat.id}")
    bot.send_message(
        call.message.chat.id,
        "You are now back at the main menu.",
        reply_markup=start_menu()
    )

init_db()

# Start bot
logging.info("Bot is starting...")
bot.polling(none_stop=True) 
